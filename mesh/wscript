
MESH = "mesh"

source_files = (
    "src/settings.cpp",
    "src/loader.cpp",
    "src/structures/coordinates.cpp",
    "src/structures/mesh.cpp",
    "src/structures/boundaries.cpp",
    "src/matrices/matrix.cpp",
    "src/matrices/denseMatrix.cpp",
    "src/elements/element.cpp",
    "src/elements/3D/hexahedron8.cpp",
    "src/elements/3D/hexahedron20.cpp",
    "src/elements/3D/tetrahedron4.cpp",
    "src/elements/3D/tetrahedron10.cpp",
    "src/elements/3D/prisma6.cpp",
    "src/elements/3D/prisma15.cpp",
    "src/elements/3D/pyramid5.cpp",
    "src/elements/3D/pyramid13.cpp",
    "src/elements/2D/square.cpp",
    "src/elements/2D/triangle.cpp",
    "src/elements/1D/line.cpp",
    "src/elements/1D/point3d.cpp",
    "src/elements/1D/point2d.cpp",
)


def configure(ctx):
    ctx.setenv(MESH, ctx.all_envs["mpi"].derive());

    if ctx.options.debug:
        ctx.env.append_unique("CXXFLAGS", [ "-DDEBUG" ])

def build(ctx):
    ctx.env = ctx.all_envs[MESH]

    if ctx.options.mesh:
        ctx.env = ctx.all_envs["base"]
        ctx.env.append_unique("CXXFLAGS", [ "-DDEBUG" ])
        ctx.env.append_unique("CXXFLAGS", [ "-I/usr/include/mpi" ])
        ctx.program(
            source=source_files + ("src/main.cpp",),
            target="esmesh",
            use="espreso_includes bem_includes esbem",
            install_path=ctx.ROOT
        )
    else:
        ctx.shlib(
            source=source_files,
            target="esmesh",
            use="espreso_includes bem_includes esbem",
            install_path=ctx.ROOT + "/libs"
        )

    ctx(
        export_includes = "src",
        name            = "mesh_includes"
    )
