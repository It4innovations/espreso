
MESH = "base"

source_files = (
    "src/settings.cpp",
    "src/loader.cpp",
    "src/structures/coordinates.cpp",
    "src/structures/mesh.cpp",
    "src/structures/boundaries.cpp",
    "src/matrices/matrix.cpp",
    "src/matrices/denseMatrix.cpp",
    "src/matrices/sparseCSRMatrix.cpp",
    "src/matrices/sparseDOKMatrix.cpp",
    "src/matrices/sparseIJVMatrix.cpp",
    "src/matrices/sparseVVPMatrix.cpp",
    "src/elements/element.cpp",
    "src/elements/3D/hexahedron.cpp",
    "src/elements/3D/tetrahedron.cpp",
    "src/elements/3D/tetrahedron4.cpp",
    "src/elements/2D/square.cpp",
    "src/elements/2D/triangle.cpp",
    "src/elements/1D/line.cpp",
    "src/elements/1D/point3d.cpp",
    "src/elements/1D/point2d.cpp",
)

def configure(ctx):
    pass

def build(ctx):
    ctx.env = ctx.all_envs[MESH]

    if ctx.options.mesh:
        ctx.program(
            source=source_files + ("src/main.cpp",),
            target="esmesh",
            lib="metis esbem",
            libpath="../libs",
            use="metis_includes bem_includes"
        )
    else:
        ctx.shlib(
            source=source_files,
            target="esmesh",
            lib="metis esbem",
            libpath="../libs",
            use="metis_includes bem_includes",
            install_path=ctx.ROOT + "/libs"
        )

    ctx(
        export_includes = "src",
        name            = "mesh_includes"
    )
