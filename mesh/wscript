
MESH = "mesh"
MESH_APP = "meshApp"

source_files = (
    "src/settings.cpp",
    "src/loader.cpp",
    "src/structures/coordinates.cpp",
    "src/structures/mesh.cpp",
    "src/structures/boundaries.cpp",
    "src/matrices/matrix.cpp",
    "src/matrices/denseMatrix.cpp",
    "src/elements/element.cpp",
    "src/elements/3D/hexahedron8.cpp",
    "src/elements/3D/hexahedron20.cpp",
    "src/elements/3D/tetrahedron4.cpp",
    "src/elements/3D/tetrahedron10.cpp",
    "src/elements/3D/prisma6.cpp",
    "src/elements/3D/prisma15.cpp",
    "src/elements/3D/pyramid5.cpp",
    "src/elements/3D/pyramid13.cpp",
    "src/elements/2D/square.cpp",
    "src/elements/2D/triangle.cpp",
    "src/elements/1D/line.cpp",
    "src/elements/1D/point3d.cpp",
    "src/elements/1D/point2d.cpp",
)


def configure(ctx):
    ctx.setenv(MESH, ctx.all_envs[""].derive());

    ctx.setenv(MESH_APP, ctx.all_envs[""].derive());

    ctx.env.append_unique("LIBPATH", [ "../libs" ])
    ctx.env.append_unique("LINKFLAGS", [ "-Wall", "-openmp" ])

    if ctx.env.ESLOCAL == 32:
        ctx.env.append_unique("LIB", [ "metis32", "mkl_intel_lp64" ])
    if ctx.env.ESLOCAL == 64:
        ctx.env.append_unique("LIB", [ "metis64", "mkl_intel_ilp64" ])

    ctx.env.append_unique("LIB", [ "mkl_core", "mkl_intel_thread", "pthread" ])


def build(ctx):

    if ctx.options.mesh:
        ctx.env = ctx.all_envs[MESH_APP]
        ctx.program(
            source          = source_files + ("src/main.cpp",),
            target          = "esmesh",
            use             = "espreso_includes bem_includes esbem",
            install_path    = ctx.ROOT
        )
    else:
        ctx.env = ctx.all_envs[MESH]
        ctx.shlib(
            source          = source_files,
            target          = "esmesh",
            use             = "espreso_includes bem_includes",
            install_path    = ctx.ROOT + "/libs"
        )

    ctx(
        export_includes = "src",
        name            = "mesh_includes"
    )
