
#include "hexahedron20.h"


std::vector< std::vector< double > > hexahedron20_rst()
{

std::vector< std::vector<double> > rst(3, std::vector<double>(Hexahedron20GPCount));
	switch (Hexahedron20GPCount) {
	case 8: {
		double r[] = {
        -0.577350269189625953,	
        -0.577350269189625953,	
        -0.577350269189625953,	
        -0.577350269189625953,	
         0.577350269189625953,	
         0.577350269189625953,	
         0.577350269189625953	
		};
		double s[] = {
        -0.577350269189625953,	
        -0.577350269189625953,	
         0.577350269189625953,	
         0.577350269189625953,	
        -0.577350269189625953,	
        -0.577350269189625953,	
         0.577350269189625953	
		};
		double t[] = {
        -0.577350269189625953, 
         0.577350269189625953, 
        -0.577350269189625953, 
         0.577350269189625953, 
        -0.577350269189625953, 
         0.577350269189625953, 
        -0.577350269189625953
		};
    rst[0].insert(rst[0].begin(),r,r+8);
    rst[1].insert(rst[1].begin(),s,s+8);
    rst[2].insert(rst[2].begin(),t,t+8);
		return rst;
	}
	case 14: {
		double r[] = {
        -0.758786910639329015,	
         0.758786910639329015,	
         0.758786910639329015,	
        -0.758786910639329015,	
        -0.758786910639329015,	
         0.758786910639329015,	
         0.758786910639329015,	
        -0.758786910639329015,
         0.000000000000000000,
         0.000000000000000000,
         0.795822425754222018,
         0.000000000000000000,
        -0.795822425754222018,
         0.000000000000000000
		};
		double s[] = {
        -0.758786910639329015,	
        -0.758786910639329015,	
         0.758786910639329015,	
         0.758786910639329015,	
        -0.758786910639329015,	
        -0.758786910639329015,	
         0.758786910639329015,	
         0.758786910639329015,
         0.000000000000000000,
        -0.795822425754222018,
         0.000000000000000000,
         0.795822425754222018,
         0.000000000000000000,
         0.000000000000000000
		};
		double t[] = {
        -0.758786910639329015, 
        -0.758786910639329015, 
        -0.758786910639329015, 
        -0.758786910639329015, 
         0.758786910639329015, 
         0.758786910639329015, 
         0.758786910639329015, 
         0.758786910639329015, 
        -0.795822425754222018, 
         0.000000000000000000, 
         0.000000000000000000, 
         0.000000000000000000, 
         0.000000000000000000, 
         0.795822425754222018 
		};
    rst[0].insert(rst[0].begin(),r,r+14);
    rst[1].insert(rst[1].begin(),s,s+14);
    rst[2].insert(rst[2].begin(),t,t+14);
		return rst;
	}
	default:
		std::cerr << "Unknown number of Tatrahedron10 GP count\n";
		exit(EXIT_FAILURE);
	}
}


std::vector<DenseMatrix> hexahedron20_dN()
{
	std::vector<DenseMatrix> dN(
		Hexahedron20GPCount,
		DenseMatrix(Point::size(), Hexahedron20NodesCount)
	);

//	std::vector<double> rv;
//	std::vector<double> sv;
//	std::vector<double> tv;
//
//	if (Hexahedron20GPCount == 8) {
//		double _rv[] = {
//        -0.577350269189625953,	
//        -0.577350269189625953,	
//        -0.577350269189625953,	
//        -0.577350269189625953,	
//         0.577350269189625953,	
//         0.577350269189625953,	
//         0.577350269189625953	
//		};
//		double _sv[] = {
//        -0.577350269189625953,	
//        -0.577350269189625953,	
//         0.577350269189625953,	
//         0.577350269189625953,	
//        -0.577350269189625953,	
//        -0.577350269189625953,	
//         0.577350269189625953	
//		};
//		double _tv[] = {
//        -0.577350269189625953, 
//         0.577350269189625953, 
//        -0.577350269189625953, 
//         0.577350269189625953, 
//        -0.577350269189625953, 
//         0.577350269189625953, 
//        -0.577350269189625953
//		};
//		rv.assign(_rv, _rv + Hexahedron20GPCount);
//		sv.assign(_sv, _sv + Hexahedron20GPCount);
//		tv.assign(_tv, _tv + Hexahedron20GPCount);
//	}
//	else if (Hexahedron20GPCount == 14) {
//
//		double _rv[] = {
//        -0.758786910639329015,	
//         0.758786910639329015,	
//         0.758786910639329015,	
//        -0.758786910639329015,	
//        -0.758786910639329015,	
//         0.758786910639329015,	
//         0.758786910639329015,	
//        -0.758786910639329015,
//         0.000000000000000000,
//         0.000000000000000000,
//         0.795822425754222018,
//         0.000000000000000000,
//        -0.795822425754222018,
//         0.000000000000000000
//		};
//		double _sv[] = {
//        -0.758786910639329015,	
//        -0.758786910639329015,	
//         0.758786910639329015,	
//         0.758786910639329015,	
//        -0.758786910639329015,	
//        -0.758786910639329015,	
//         0.758786910639329015,	
//         0.758786910639329015,
//         0.000000000000000000,
//        -0.795822425754222018,
//         0.000000000000000000,
//         0.795822425754222018,
//         0.000000000000000000,
//         0.000000000000000000
//		};
//		double _tv[] = {
//        -0.758786910639329015, 
//        -0.758786910639329015, 
//        -0.758786910639329015, 
//        -0.758786910639329015, 
//         0.758786910639329015, 
//         0.758786910639329015, 
//         0.758786910639329015, 
//         0.758786910639329015, 
//        -0.795822425754222018, 
//         0.000000000000000000, 
//         0.000000000000000000, 
//         0.000000000000000000, 
//         0.000000000000000000, 
//         0.795822425754222018 
//		};
//		rv.assign(_rv, _rv + Hexahedron20GPCount);
//		sv.assign(_sv, _sv + Hexahedron20GPCount);
//		tv.assign(_tv, _tv + Hexahedron20GPCount);
//	}

	for (unsigned int i = 0; i < Hexahedron20GPCount; i++) {
		DenseMatrix &m = dN[i];

		//double r = rv[i];
		//double s = sv[i];
		//double t = tv[i];

    double r = hexahedron20_N::_rst[0][i];
    double s = hexahedron20_N::_rst[1][i];
    double t = hexahedron20_N::_rst[2][i];


		 // dNr - derivation of basis function
		m(0, 0) =   ((s - 1.0)*(t - 1.0)*(r + s + t + 2.0))/8.0 + ((r - 1.0)*(s - 1.0)*(t - 1.0))/8.0;
		m(0, 1) =   ((r + 1.0)*(s - 1.0)*(t - 1.0))/8.0 - ((s - 1.0)*(t - 1.0)*(s - r + t + 2.0))/8.0;
		m(0, 2) = - ((s + 1.0)*(t - 1.0)*(r + s - t - 2.0))/8.0 - ((r + 1.0)*(s + 1.0)*(t - 1.0))/8.0;
		m(0, 3) = - ((s + 1.0)*(t - 1.0)*(r - s + t + 2.0))/8.0 - ((r - 1.0)*(s + 1.0)*(t - 1.0))/8.0;
		m(0, 4) = - ((s - 1.0)*(t + 1.0)*(r + s - t + 2.0))/8.0 - ((r - 1.0)*(s - 1.0)*(t + 1.0))/8.0;
		m(0, 5) = - ((s - 1.0)*(t + 1.0)*(r - s + t - 2.0))/8.0 - ((r + 1.0)*(s - 1.0)*(t + 1.0))/8.0;
		m(0, 6) =   ((s + 1.0)*(t + 1.0)*(r + s + t - 2.0))/8.0 + ((r + 1.0)*(s + 1.0)*(t + 1.0))/8.0;
		m(0, 7) =   ((s + 1.0)*(t + 1.0)*(r - s - t + 2.0))/8.0 + ((r - 1.0)*(s + 1.0)*(t + 1.0))/8.0;
		m(0, 8) = - (r*(s - 1.0)*(t - 1.0))/2.0;
		m(0, 9) =   ((pow(s,2.0) - 1.0)*(t - 1.0))/4.0;
		m(0,10) =  (r*(s + 1.0)*(t - 1.0))/2.0;
		m(0,11) = -((pow(s,2.0) - 1.0)*(t - 1.0))/4.0;
		m(0,12) =  (r*(s - 1.0)*(t + 1.0))/2.0;
		m(0,13) = -((pow(s,2.0) - 1.0)*(t + 1.0))/4.0;
		m(0,14) = -(r*(s + 1.0)*(t + 1.0))/2.0;
		m(0,15) =  ((pow(s,2.0) - 1.0)*(t + 1.0))/4.0;
		m(0,16) = -((pow(t,2.0) - 1.0)*(s - 1.0))/4.0;
		m(0,17) =  ((pow(t,2.0) - 1.0)*(s - 1.0))/4.0;
		m(0,18) = -((pow(t,2.0) - 1.0)*(s + 1.0))/4.0;
		m(0,19) =  ((pow(t,2.0) - 1.0)*(s + 1.0))/4.0;


//	  m dNs - derivation of basis function
		m(1, 0) = ((r - 1.0)*(t - 1.0)*(r + s + t + 2.0))/8.0 + ((r - 1.0)*(s - 1.0)*(t - 1.0))/8.0;
		m(1, 1) =  - ((r + 1.0)*(t - 1.0)*(s - r + t + 2.0))/8.0 - ((r + 1.0)*(s - 1.0)*(t - 1.0))/8.0;
		m(1, 2) = - ((r + 1.0)*(t - 1.0)*(r + s - t - 2.0))/8.0 - ((r + 1.0)*(s + 1.0)*(t - 1.0))/8.0;
		m(1, 3) = ((r - 1.0)*(s + 1.0)*(t - 1.0))/8.0 - ((r - 1.0)*(t - 1.0)*(r - s + t + 2.0))/8.0;
		m(1, 4) = - ((r - 1.0)*(t + 1.0)*(r + s - t + 2.0))/8.0 - ((r - 1.0)*(s - 1.0)*(t + 1.0))/8.0;
		m(1, 5) = ((r + 1.0)*(s - 1.0)*(t + 1.0))/8.0 - ((r + 1.0)*(t + 1.0)*(r - s + t - 2.0))/8.0;
		m(1, 6) =  ((r + 1.0)*(t + 1.0)*(r + s + t - 2.0))/8.0 + ((r + 1.0)*(s + 1.0)*(t + 1.0))/8.0;
		m(1, 7) = ((r - 1.0)*(t + 1.0)*(r - s - t + 2.0))/8.0 - ((r - 1.0)*(s + 1.0)*(t + 1.0))/8.0;
		m(1, 8) = -((pow(r,2.0) - 1.0)*(t - 1.0))/4.0;
		m(1, 9) = (s*(r + 1.0)*(t - 1.0))/2.0;
		m(1,10) = ((pow(r,2.0) - 1.0)*(t - 1.0))/4.0;
		m(1,11) = -(s*(r - 1.0)*(t - 1.0))/2.0;
		m(1,12) = ((pow(r,2.0) - 1.0)*(t + 1.0))/4.0;
		m(1,13) = -(s*(r + 1.0)*(t + 1.0))/2.0;
		m(1,14) = -((pow(r,2.0) - 1.0)*(t + 1.0))/4.0;
		m(1,15) = (s*(r - 1.0)*(t + 1.0))/2.0;
		m(1,16) = -((pow(t,2.0) - 1.0)*(r - 1.0))/4.0;
		m(1,17) = ((pow(t,2.0) - 1.0)*(r + 1.0))/4.0;
		m(1,18) = -((pow(t,2.0) - 1.0)*(r + 1.0))/4.0;
		m(1,19) = ((pow(t,2.0) - 1.0)*(r - 1.0))/4.0;

//	  m dNt - derivation of basis function
		m(2, 0) = ((r - 1.0)*(s - 1.0)*(r + s + t + 2.0))/8.0 + ((r - 1.0)*(s - 1.0)*(t - 1.0))/8.0;
		m(2, 1) = - ((r + 1.0)*(s - 1.0)*(s - r + t + 2.0))/8.0 - ((r + 1.0)*(s - 1.0)*(t - 1.0))/8.0;
		m(2, 2) = ((r + 1.0)*(s + 1.0)*(t - 1.0))/8.0 - ((r + 1.0)*(s + 1.0)*(r + s - t - 2.0))/8.0;
		m(2, 3) = - ((r - 1.0)*(s + 1.0)*(r - s + t + 2.0))/8.0 - ((r - 1.0)*(s + 1.0)*(t - 1.0))/8.0;
		m(2, 4) = ((r - 1.0)*(s - 1.0)*(t + 1.0))/8.0 - ((r - 1)*(s - 1.0)*(r + s - t + 2.0))/8.0;
		m(2, 5) = - ((r + 1.0)*(s - 1.0)*(r - s + t - 2.0))/8.0 - ((r + 1.0)*(s - 1.0)*(t + 1.0))/8.0;
		m(2, 6) = ((r + 1.0)*(s + 1.0)*(r + s + t - 2.0))/8.0 + ((r + 1.0)*(s + 1.0)*(t + 1.0))/8.0;
		m(2, 7) = ((r - 1.0)*(s + 1.0)*(r - s - t + 2.0))/8.0 - ((r - 1.0)*(s + 1.0)*(t + 1.0))/8.0;
		m(2, 8) = -((pow(r,2.0) - 1.0)*(s - 1.0))/4.0; 
		m(2, 9) = ((pow(s,2.0) - 1.0)*(r + 1.0))/4.0;
		m(2,10) = ((pow(r,2.0) - 1.0)*(s + 1.0))/4.0;
		m(2,11) = -((pow(s,2.0) - 1.0)*(r - 1.0))/4.0;
		m(2,12) = ((pow(r,2.0) - 1.0)*(s - 1.0))/4.0;
		m(2,13) = -((pow(s,2.0) - 1.0)*(r + 1.0))/4.0;
		m(2,14) = -((pow(r,2.0) - 1.0)*(s + 1.0))/4.0;
		m(2,15) = ((pow(s,2.0) - 1.0)*(r - 1.0))/4.0;
		m(2,16) = -(t*(r - 1.0)*(s - 1.0))/2.0;
		m(2,17) = (t*(r + 1.0)*(s - 1.0))/2.0;
		m(2,18) = -(t*(r + 1.0)*(s + 1.0))/2.0;
		m(2,19) = (t*(r - 1.0)*(s + 1.0))/2.0;
	}

	return dN;
}




std::vector<DenseMatrix> hexahedron20_N() {
	std::vector<DenseMatrix> N(
		Hexahedron20GPCount,
		DenseMatrix(1, Hexahedron20NodesCount)
	);

//	std::vector<double> rv;
//	std::vector<double> sv;
//	std::vector<double> tv;
//
//	if (Hexahedron20GPCount == 8) {
//		double _rv[] = {
//        -0.577350269189625953,	
//        -0.577350269189625953,	
//        -0.577350269189625953,	
//        -0.577350269189625953,	
//         0.577350269189625953,	
//         0.577350269189625953,	
//         0.577350269189625953	
//		};
//		double _sv[] = {
//        -0.577350269189625953,	
//        -0.577350269189625953,	
//         0.577350269189625953,	
//         0.577350269189625953,	
//        -0.577350269189625953,	
//        -0.577350269189625953,	
//         0.577350269189625953	
//		};
//		double _tv[] = {
//        -0.577350269189625953, 
//         0.577350269189625953, 
//        -0.577350269189625953, 
//         0.577350269189625953, 
//        -0.577350269189625953, 
//         0.577350269189625953, 
//        -0.577350269189625953
//		};
//		rv.assign(_rv, _rv + Hexahedron20GPCount);
//		sv.assign(_sv, _sv + Hexahedron20GPCount);
//		tv.assign(_tv, _tv + Hexahedron20GPCount);
//	}
//	else if (Hexahedron20GPCount == 14) {
//
//		double _rv[] = {
//        -0.758786910639329015,	
//         0.758786910639329015,	
//         0.758786910639329015,	
//        -0.758786910639329015,	
//        -0.758786910639329015,	
//         0.758786910639329015,	
//         0.758786910639329015,	
//        -0.758786910639329015,
//         0.000000000000000000,
//         0.000000000000000000,
//         0.795822425754222018,
//         0.000000000000000000,
//        -0.795822425754222018,
//         0.000000000000000000
//		};
//		double _sv[] = {
//        -0.758786910639329015,	
//        -0.758786910639329015,	
//         0.758786910639329015,	
//         0.758786910639329015,	
//        -0.758786910639329015,	
//        -0.758786910639329015,	
//         0.758786910639329015,	
//         0.758786910639329015,
//         0.000000000000000000,
//        -0.795822425754222018,
//         0.000000000000000000,
//         0.795822425754222018,
//         0.000000000000000000,
//         0.000000000000000000
//		};
//		double _tv[] = {
//        -0.758786910639329015, 
//        -0.758786910639329015, 
//        -0.758786910639329015, 
//        -0.758786910639329015, 
//         0.758786910639329015, 
//         0.758786910639329015, 
//         0.758786910639329015, 
//         0.758786910639329015, 
//        -0.795822425754222018, 
//         0.000000000000000000, 
//         0.000000000000000000, 
//         0.000000000000000000, 
//         0.000000000000000000, 
//         0.795822425754222018 
//		};
//		rv.assign(_rv, _rv + Hexahedron20GPCount);
//		sv.assign(_sv, _sv + Hexahedron20GPCount);
//		tv.assign(_tv, _tv + Hexahedron20GPCount);
//	}


	for (unsigned int i = 0; i < Hexahedron20GPCount; i++) {

		//double r = rv[i];
		//double s = sv[i];
		//double t = tv[i];

    double r = hexahedron20_N::_rst[0][i];
    double s = hexahedron20_N::_rst[1][i];
    double t = hexahedron20_N::_rst[2][i];


		DenseMatrix &m = N[i];

		// basis function
		m(0, 0) = 0.125 * ((1.0-r)*(1-s)*(1.0-t)*(-2.0-r-s-t));
		m(0, 1) = 0.125 * ((r+1.0)*(1-s)*(1.0-t)*(r-s-t-2.0));
		m(0, 2) = 0.125 * ((r+1.0)*(s+1.0)*(1.0-t)*(r+s-t-2.0));
		m(0, 3) = 0.125 * ((1.0-r)*(s+1.0)*(1.0-t)*(-r+s-t-2.0));
		m(0, 4) = 0.125 * ((1.0-r)*(1-s)*(t+1.0)*(-r-s+t-2.0));
		m(0, 5) = 0.125 * ((r+1.0)*(1-s)*(t+1.0)*(r-s+t-2.0));
		m(0, 6) = 0.125 * ((r+1.0)*(s+1.0)*(t+1.0)*(r+s+t-2.0));
		m(0, 7) = 0.125 * ((1.0-r)*(s+1.0)*(t+1.0)*(-r+s+t-2.0));
		m(0, 8) =  0.25 * ((1.0-pow(r,2.0))*(1.0-s)*(1.0-t));
		m(0, 9) =  0.25 * ((1.0+r)*(1.0-pow(s,2.0))*(1.0-t));
		m(0,10) =  0.25 * ((1.0-pow(r,2.0))*(1.0+s)*(1.0-t));
		m(0,11) =  0.25 * ((1.0-r)*(1.0-pow(s,2.0))*(1.0-t));
		m(0,12) =  0.25 * ((1.0-pow(r,2.0))*(1.0-s)*(1.0+t));
		m(0,13) =  0.25 * ((1.0+r)*(1.0-pow(s,2.0))*(1.0+t));
		m(0,14) =  0.25 * ((1.0-pow(r,2.0))*(1.0+s)*(1.0+t));
		m(0,15) =  0.25 * ((1.0-r)*(1.0-pow(s,2.0))*(1.0+t));
		m(0,16) =  0.25 * ((1.0-r)*(1.0-s)*(1.0-pow(t,2.0)));
		m(0,17) =  0.25 * ((1.0+r)*(1.0-s)*(1.0-pow(t,2.0)));
		m(0,18) =  0.25 * ((1.0+r)*(1.0+s)*(1.0-pow(t,2.0)));
		m(0,19) =  0.25 * ((1.0-r)*(1.0+s)*(1.0-pow(t,2.0)));
	}

	return N;
}



std::vector<double> hexahedron20_weight()
{
	switch (Hexahedron20GPCount) {
	case 8: {
		return std::vector<double> (8, 1.0);
	}
	case 14: {
		std::vector<double> w(14, 0.0);
	  double WF_scale_1 =0.335180055401662;
	  double WF_scale_2 =0.886426592797784;
    for (int i=0;i<8;i++){
      if (i<8){
        w[i]=WF_scale_1;
      }
      else {
        w[i]=WF_scale_2;
      }
    }
		return w;
	}
	default:
		std::cerr << "Unknown number of Tatrahedron10 GP count\n";
		exit(EXIT_FAILURE);
	}
}

std::vector< <std::vector <double> > Hexahedron20::_rst = hexahedron20_rst();
std::vector<DenseMatrix> Hexahedron20::_dN = hexahedron20_dN();
std::vector<DenseMatrix> Hexahedron20::_N = hexahedron20_N();
std::vector<DenseMatrix> Hexahedron20::_weighFactor = hexahedron20_weight();

bool Hexahedron20::match(idx_t *indices, idx_t n) {

#ifndef D3
	// Hexahedron20 is 3D element
	return false;
#endif

	if (n != 8) {
		return false;
	}

	for (idx_t i = 0; i < 7; i++) {
		for (idx_t j = i + 1; j < 8; j++) {
			if (Element::match(indices, i, j)) {
				return false;
			}
		}
	}

	return true;
}

std::vector<idx_t> Hexahedron20::getNeighbours(size_t nodeIndex) const
{
	std::vector<idx_t> result(3);

	if (nodeIndex > 3) {
		result[0] = _indices[nodeIndex - 4];
		result[1] = _indices[(nodeIndex + 1) % 4 + 4];
		result[2] = _indices[(nodeIndex + 3) % 4 + 4];
	} else {
		result[0] = _indices[nodeIndex + 4];
		result[1] = _indices[(nodeIndex + 1) % 4];
		result[2] = _indices[(nodeIndex + 3) % 4];
	}

	return result;
}

std::vector<idx_t> Hexahedron20::getFace(size_t face) const
{
	std::vector<idx_t> result(4);

	// bottom
	if (face == 4) {
		result[0] = _indices[0];
		result[1] = _indices[3];
		result[2] = _indices[2];
		result[3] = _indices[1];
		return result;
	}

	// top
	if (face == 5) {
		result[0] = _indices[4];
		result[1] = _indices[5];
		result[2] = _indices[6];
		result[3] = _indices[7];
		return result;
	}

	//sides
	result[0] = _indices[ face              ];
	result[1] = _indices[(face + 1) % 4     ];
	result[2] = _indices[(face + 1) % 4 + 4 ];
	result[3] = _indices[ face + 4          ];
	return result;
}

Hexahedron20::Hexahedron20(idx_t *indices)
{
	memcpy(_indices, indices, Hexahedron20NodesCount * sizeof(idx_t));
}


