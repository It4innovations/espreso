CC=mpicc

SOURCE_DIR=../..
METIS_DIR=$(SOURCE_DIR)/metis/metis-5.1.0/include
LIBS=$(SOURCE_DIR)/libs
INCLUDE=

USRCFLAGS=
DEBUGCFLAGS=-O0 -g -cilk-serialize 

CFLAGS =-DXE6 -no-multibyte-chars -c -Wall -mkl=sequential -I$(METIS_DIR) #-DHFETI_SOLVER #-DCUDA #-Wall
opt   : CFLAGS += -O3 -xHost -ip -g
debug : CFLAGS += $(DEBUGCFLAGS)
pipe  : CFLAGS += $(USRCFLAGS)
lib   : CFLAGS += -fPIC -O3 -xHost -ip # -g -d -cilk-serialize
mic   : CFLAGS += -mmic 

LDFLAGS = -mkl=parallel -L$(LIBS) -lmetis -ltbb
LDFLAGS_MIC =  -mmic -mkl=parallel -L$(LIBS) -ltbb 

SOURCES = \
elements/element.cpp \
elements/1D/point2d.cpp \
elements/1D/point3d.cpp \
elements/1D/line.cpp \
elements/2D/square.cpp \
elements/2D/triangle.cpp \
elements/3D/hexahedron.cpp \
elements/3D/tetrahedron.cpp \
matrices/matrix.cpp \
matrices/denseMatrix.cpp \
matrices/sparseIJVMatrix.cpp \
matrices/sparseCSRMatrix.cpp \
matrices/sparseDOKMatrix.cpp \
matrices/sparseVVPMatrix.cpp \
structures/coordinates.cpp \
structures/mesh.cpp \
structures/boundaries.cpp \
structures/faces.cpp \
structures/corners.cpp \
loader.cpp \
settings.cpp



OBJECTS = $(SOURCES:.cpp=.o)

EXECUTABLE = esmesh
DEBUG_EXEC = esmesh_db
MIC_EXEC   = esmesh_mic
PIPE_EXEC  = esmesh_pipe
LIB        = libesmesh.so

opt: $(SOURCES) $(EXECUTABLE)

pipe: $(SOURCES) $(PIPE_EXEC)

debug: $(SOURCES) $(DEBUG_EXEC)

lib: $(SOURCES) $(LIB)

mic: $(SOURCES) $(MIC_EXEC)


$(EXECUTABLE): $(OBJECTS) 
	$(CC) $(LDFLAGS) $(OBJECTS) -o $@

$(DEBUG_EXEC): $(OBJECTS)
	$(CC) $(LDFLAGS) $(OBJECTS) -o $@

$(LIB): $(OBJECTS)
	$(CC) -shared $(INCLUDE) $(OBJECTS) -o $@

$(MIC_EXEC): $(OBJECTS)
	$(CC) $(LDFLAGS_MIC) $(OBJECTS) -o $@

$(PIPE_EXEC): $(OBJECTS)
	$(CC) $(LDFLAGS) $(OBJECTS) -o $@

%.o: %.cpp
	$(CC) $(CFLAGS) $< -o $@

clean:
	rm -rf *.o 

cleanall:
	rm -rf *.o $(EXECUTABLE) $(DEBUG_EXEC) $(PIPE_EXEC) $(MIC_EXEC) $(LIB)
