
APP = "espreso"

from waflib.Tools.ccroot import link_task

class cxxprogram(link_task):
    vars    = ['LINKDEPS']
    ext_out = ['.bin']
    inst_to = '${BINDIR}',
    run_str = '${LINK_CXX} \
               ${LINKFLAGS} \
               ${CXXLNK_SRC_F}${SRC} \
               ${CXXLNK_TGT_F}${TGT[0].abspath()} \
               ${RPATH_ST:RPATH} \
               ${FRAMEWORKPATH_ST:FRAMEWORKPATH} \
               ${FRAMEWORK_ST:FRAMEWORK} \
               ${ARCH_ST:ARCH} \
               ${SHLIB_MARKER} \
               ${LIBPATH_ST:LIBPATH} \
               ${LIB_ST:LIB} \
               ${LDFLAGS} \
               ${STLIB_MARKER} \
               -Wl,--start-group \
               ${STLIBPATH_ST:STLIBPATH} \
               ${STLIB_ST:STLIB} \
               -Wl,--end-group \
               ${SHLIB_MARKER}'

source_files = (
    "factory/factory.cpp",
)

apiwrapper_files = (
    "apiwrapper/wrapper.cpp",
)

def configure(ctx):
    ctx.setenv(APP, ctx.all_envs[""].derive())
    ctx.append_solver_attributes(ctx)

    ctx.env.append_unique("LIBPATH", [ "../libs" ])
    ctx.env.append_unique("STLIBPATH", [ "../libs" ])

    if ctx.env.INT_WIDTH == 32:
        mkl = "mkl_intel_lp64"
        metis = "metis32"
    if ctx.env.INT_WIDTH == 64:
        mkl = "mkl_intel_ilp64"
        metis = "metis64"

    if ctx.env.LIBTYPE == "STATIC":
        ctx.env.append_unique("STLIB", [ metis ])
    else:
        ctx.env.append_unique("LIB", [ metis ])

    if ctx.env.SOLVER == "PARDISO":
        ctx.env.append_unique("LIB", [ "pardiso500-INTEL120-X86-64" ])
        ctx.env.append_value("STLIB", [ "ifcore" ])

    ctx.env.append_unique("LIB", [ mkl, "mkl_core", "mkl_intel_thread", "pthread" ])


################################################################################
################################################################################


def build(ctx):
    ctx.env = ctx.all_envs[APP]

    ctx.program(
        source          = source_files + ("main.cpp",),
        target          = "espreso",
        use             = "espreso_insluces esbasis esconfig essolver_{0} esinput_ansys esinput_generator esinput_esdata esinput_openfoam esoutput_esdata esoutput_vtk esmesh esbem".format(ctx.env.SOLVER),
        install_path    = ctx.ROOT
    )

    ctx.program(
        source          = source_files + ("decomposer.cpp",),
        target          = "decomposer",
        use             = "espreso_insluces esbasis esconfig essolver_{0} esinput_ansys esinput_generator esinput_esdata esinput_openfoam esoutput_esdata esoutput_vtk esmesh esbem".format(ctx.env.SOLVER),
        install_path    = ctx.ROOT
    )

    ctx.shlib(
        source          = apiwrapper_files,
        target          = "espreso",
        use             = "espreso_insluces esbasis esconfig essolver_{0} esbem".format(ctx.env.SOLVER),
        install_path    = ctx.LIBRARIES
    )


