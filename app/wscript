
APP = "espreso"
APP_MIC = APP + "_mic"
APP_CUDA = APP + "_cuda"
APP_PARDISO = APP + "_pardiso"
APP_MUMPS = APP + "_mumps"

SOLVER = "essolver"
SOLVER_MIC = SOLVER + "_mic"
SOLVER_CUDA = SOLVER + "_cuda"
SOLVER_PARDISO = SOLVER + "_pardiso"
SOLVER_MUMPS = SOLVER + "_mumps"

import os

from waflib.Tools.ccroot import link_task

class cxxprogram(link_task):
    vars    = ['LINKDEPS']
    ext_out = ['.bin']
    inst_to = '${BINDIR}',
    run_str = '${LINK_CXX} \
               ${LINKFLAGS} \
               ${CXXLNK_SRC_F}${SRC} \
               ${CXXLNK_TGT_F}${TGT[0].abspath()} \
               ${RPATH_ST:RPATH} \
               ${FRAMEWORKPATH_ST:FRAMEWORKPATH} \
               ${FRAMEWORK_ST:FRAMEWORK} \
               ${ARCH_ST:ARCH} \
               ${SHLIB_MARKER} \
               ${LIBPATH_ST:LIBPATH} \
               ${LIB_ST:LIB} \
               ${LDFLAGS} \
               ${STLIB_MARKER} \
               ${STLIBPATH_ST:STLIBPATH} \
               ${STLIB_ST:STLIB} \
               ${SHLIB_MARKER}'

source_files = (
    "src/configuration.cpp",
    "src/instance.cpp"
)

def configure(ctx):
    ctx.setenv(APP, ctx.all_envs[""].derive())

################################################################################
#                     Set libraries used by ESPRESO
################################################################################

    ctx.env.append_unique("LIBPATH", [ "../libs" ])
    if ctx.options.titan:
        ctx.env.append_unique("LIBPATH", [ "/opt/intel/composer_xe_2013_sp1.2.144/compiler/lib/intel64/" ])
    else:
        ctx.env.append_unique("STLIBPATH", [ "../libs" ])

    if ctx.env.ESLOCAL == 32:
        ctx.env.append_unique("LIB", [ "metis32", "mkl_intel_lp64" ])
    if ctx.env.ESLOCAL == 64:
        # TODO: 64b variant of solver is not working!
        mkl = "mkl_intel_ilp64"
        metis = "metis64"
    if ctx.options.titan:
        metis = "metis"


    ctx.setenv(APP_MIC, ctx.all_envs[APP].derive())
    ctx.env.append_unique("LIB", [ "pardiso500-INTEL120-X86-64", "imf", "intlc", "svml", "irng", metis, mkl, "mkl_core", "mkl_intel_thread", "pthread" ])
    ctx.env.append_unique("STLIB", [ "ifcore" ])
    ctx.env.append_unique("LINKFLAGS", [ "-offload-option,mic,ld,-L{0}/lib/mic -lmkl_intel_lp64 -lmkl_core -lmkl_intel_thread".format(os.environ['MKLROOT']) ])


    ctx.setenv(APP_CUDA, ctx.all_envs[APP].derive())
    ctx.env.append_unique("CXXFLAGS", [ "-DCUDA" ])
    ctx.env.append_unique("LIBPATH", [ "/usr/local/cuda-7.0/lib64" ])
    ctx.env.append_unique("LIB", [ "pardiso500-INTEL120-X86-64", "cudart", "cublas", metis, mkl, "mkl_core", "mkl_intel_thread", "pthread" ])
    ctx.env.append_unique("STLIB", [ "ifcore" ])


    ctx.setenv(APP_PARDISO, ctx.all_envs[APP].derive())
    ctx.env.append_unique("LIB", [ "pardiso500-INTEL120-X86-64", metis, mkl, "mkl_core", "mkl_intel_thread", "pthread" ])
    if ctx.options.titan:
        ctx.env.append_value("LIB", [ "ifcore" ])
    else:
        ctx.env.append_value("STLIB", [ "ifcore" ])


    ctx.setenv(APP_MUMPS, ctx.all_envs[APP].derive())
    ctx.env.append_unique("LIB", [ metis, "mkl_scalapack_lp64", "mkl_blacs_intelmpi_lp64", mkl, "mkl_core", "mkl_intel_thread", "pthread" ])
    ctx.env.append_unique("STLIB", [ "dmumps", "mumps_common", "pord", "esmumps", "scotch", "scotcherr" ])
    if ctx.options.gfortran:
        ctx.env.append_unique("LIB", [ "gfortran" ])
    else:
        ctx.env.append_unique("LIB", [ "ifcore" ])


################################################################################
################################################################################


def build(ctx):
    # DEFAULT APPLICATION
    ctx.env     = ctx.all_envs[APP_PARDISO]
    solver      = SOLVER_PARDISO

    if ctx.options.mic:
        ctx.env = ctx.all_envs[APP_MIC]
        solver  = SOLVER_MIC

    if ctx.options.cuda:
        ctx.env = ctx.all_envs[APP_CUDA]
        solver  = SOLVER_CUDA

    if ctx.options.mumps:
        ctx.env = ctx.all_envs[APP_MUMPS]
        solver  = SOLVER_MUMPS

    if ctx.options.catalyst:
        ctx.env.append_unique("STLIB", [ "adaptor" ])
        ctx.program(
            source          = "src/catalyst.cpp",
            target          = "espreso",
            use             = "solver_includes pmcube_includes mesh_includes bem_includes catalyst_includes {0} espmcube esmesh esbem".format(solver),
            install_path    = ctx.ROOT
        )
    else:
        ctx.program(
            source          = source_files + ("src/main.cpp",),
            target          = "espreso",
            use             = "solver_includes pmcube_includes mesh_includes bem_includes {0} espmcube esmesh esbem".format(solver),
            install_path    = ctx.ROOT
        )

