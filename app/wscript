
APP = "app"

from waflib.Tools.ccroot import link_task

class cxxprogram(link_task):
    vars    = ['LINKDEPS']
    ext_out = ['.bin']
    inst_to = '${BINDIR}',
    run_str = '${LINK_CXX} \
               ${LINKFLAGS} \
               ${CXXLNK_SRC_F}${SRC} \
               ${CXXLNK_TGT_F}${TGT[0].abspath()} \
               ${RPATH_ST:RPATH} \
               ${FRAMEWORKPATH_ST:FRAMEWORKPATH} \
               ${FRAMEWORK_ST:FRAMEWORK} \
               ${ARCH_ST:ARCH} \
               ${SHLIB_MARKER} \
               ${LIBPATH_ST:LIBPATH} \
               ${LIB_ST:LIB} \
               ${LDFLAGS} \
               ${STLIB_MARKER} \
               ${STLIBPATH_ST:STLIBPATH} \
               ${STLIB_ST:STLIB} \
               ${SHLIB_MARKER}'

source_files = (
    "src/main.cpp",
)

def configure(ctx):
    ctx.setenv(APP, ctx.all_envs[""].derive())

################################################################################
#                     Set libraries used by ESPRESO
################################################################################

    ctx.env.append_unique("LINKFLAGS", [ "-openmp" ])
    ctx.env.append_unique("LIBPATH", [ "../libs" ])
    if ctx.options.titan:
        ctx.env.append_unique("LINKFLAGS", [ "-pie", "-dynamic" ])
        ctx.env.append_unique("LIBPATH", [ "/opt/intel/composer_xe_2013_sp1.2.144/compiler/lib/intel64/" ])
    else:
        ctx.env.append_unique("STLIBPATH", [ "../libs" ])

    if ctx.env.ESLOCAL == 32:
        mkl = "mkl_intel_lp64"
        metis = "metis32"
    if ctx.env.ESLOCAL == 64:
        # TODO: 64b variant of solver is not working!
        mkl = "mkl_intel_ilp64"
        metis = "metis64"

    if ctx.options.titan:
        metis = "metis"

    if ctx.options.pardiso:
        ctx.env.append_unique("LIB", [ "pardiso500-INTEL120-X86-64" ])
        if ctx.options.titan:
            ctx.env.append_value("LIB", [ "ifcore" ])
        else:
            ctx.env.append_value("STLIB", [ "ifcore" ])

    elif ctx.options.mumps:
        if ctx.options.gfortran:
            ctx.env.append_unique("LIB", [ "gfortran" ])
        else:
            ctx.env.append_unique("LIB", [ "ifcore" ])

        ctx.env.append_unique("LIB", [ "mkl_scalapack_lp64", "mkl_blacs_intelmpi_lp64" ])
        ctx.env.append_unique("STLIB", [ "dmumps", "mumps_common", "pord", "esmumps", "scotch", "scotcherr" ])

    elif ctx.options.cuda:
        ctx.env.append_unique("LIBPATH", [ "/usr/local/cuda-7.0/lib64" ])
        ctx.env.append_unique("LIB", [ "cudart", "cublas"])

    else:
        pass


    ctx.env.append_unique("LIB", [ metis, mkl, "mkl_core", "mkl_intel_thread", "pthread" ])


################################################################################
################################################################################


def build(ctx):
    ctx.env = ctx.all_envs[APP]

    ctx.program(
        source          = source_files,
        target          = "espreso",
        use             = "solver_includes pmcube_includes mesh_includes bem_includes essolver espmcube esmesh esbem",
        install_path    = ctx.ROOT
    )
