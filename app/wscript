
APP = "espreso"

from waflib.Tools.ccroot import link_task

# Reconfigure build string to fit our requirements
class cxxprogram(link_task):
    vars    = ['LINKDEPS']
    ext_out = ['.bin']
    inst_to = '${BINDIR}',
    run_str = '${LINK_CXX} \
               ${LINKFLAGS} \
               ${CXXLNK_SRC_F}${SRC} \
               ${CXXLNK_TGT_F}${TGT[0].abspath()} \
               ${RPATH_ST:RPATH} \
               ${FRAMEWORKPATH_ST:FRAMEWORKPATH} \
               ${FRAMEWORK_ST:FRAMEWORK} \
               ${ARCH_ST:ARCH} \
               ${SHLIB_MARKER} \
               ${LIBPATH_ST:LIBPATH} \
               ${LIB_ST:LIB} \
               ${LDFLAGS} \
               ${STLIB_MARKER} \
               -Wl,--start-group \
               ${STLIBPATH_ST:STLIBPATH} \
               ${STLIB_ST:STLIB} \
               -Wl,--end-group \
               ${SHLIB_MARKER}'

source_files = (
    "factory/factory.cpp",
)

apiwrapper_files = (
    "apiwrapper/wrapper.cpp",
)

def configure(ctx):
    pass


def build(ctx):
    ctx.env = ctx.all_envs[APP]

    ctx.program(
        source          = source_files + ("main.cpp",),
        target          = "espreso",
        use             = "espreso_insluces esbasis esconfig essolver_{0} esinput_ansys esinput_generator esinput_esdata esinput_openfoam esoutput_esdata esoutput_vtk esmesh esbem".format(ctx.env.SOLVER),
        install_path    = ctx.ROOT
    )

    ctx.program(
        source          = source_files + ("decomposer.cpp",),
        target          = "decomposer",
        use             = "espreso_insluces esbasis esconfig essolver_{0} esinput_ansys esinput_generator esinput_esdata esinput_openfoam esoutput_esdata esoutput_vtk esmesh esbem".format(ctx.env.SOLVER),
        install_path    = ctx.ROOT
    )

    ctx.lib(
        source          = apiwrapper_files,
        target          = "espreso",
        use             = "espreso_insluces esbasis esconfig essolver_{0} esinput_ansys esinput_generator esinput_esdata esinput_openfoam esoutput_esdata esoutput_vtk esmesh esbem".format(ctx.env.SOLVER),
        install_path    = ctx.LIBRARIES
    )


