
#include "feti4i_fortran_def.h90"

INTERFACE

  SUBROUTINE FETI4ITest() &
        BIND(c,NAME='FETI4ITest')
  END SUBROUTINE FETI4ITest

  SUBROUTINE FETI4ICreateStiffnessMatrix(matrix, type, indexBase) &
        BIND(c,NAME='FETI4ICreateStiffnessMatrix')
    IMPORT
    TYPE(C_PTR) :: matrix               ! FETI4IMatrix*     type in C (output)
    INTEGER(KIND=FETI4IInt), VALUE :: type
    INTEGER(KIND=FETI4IInt), VALUE :: indexBase
  END SUBROUTINE FETI4ICreateStiffnessMatrix

  SUBROUTINE FETI4IAddElement(matrix, type, nodesSize, nodes, dofsSize, dofs, values) &
        BIND(c,NAME='FETI4IAddElement')
    IMPORT
    TYPE(C_PTR), VALUE :: matrix        ! FETI4IMatrix      type in C (input)
    INTEGER(KIND=FETI4IInt), VALUE :: type
    INTEGER(KIND=FETI4IInt), VALUE :: nodesSize
    INTEGER(KIND=FETI4IInt) :: nodes(*)
    INTEGER(KIND=FETI4IInt), VALUE :: dofsSize
    INTEGER(KIND=FETI4IInt) :: dofs(*)
    REAL(KIND=FETI4IReal) :: values(*)
  END SUBROUTINE FETI4IAddElement

  SUBROUTINE FETI4ISetDefaultIntegerOptions(options) &
        BIND(c,NAME='FETI4ISetDefaultIntegerOptions')
    IMPORT
    INTEGER(KIND=FETI4IInt) :: options(*)
  END SUBROUTINE FETI4ISetDefaultIntegerOptions

  SUBROUTINE FETI4ISetDefaultRealOptions(options) &
        BIND(c,NAME='FETI4ISetDefaultRealOptions')
    IMPORT
    REAL(KIND=FETI4IReal) :: options(*)
  END SUBROUTINE FETI4ISetDefaultRealOptions

  SUBROUTINE FETI4ICreateInstance(instance, matrix, size, rhs, l2g, &
      neighbours_size, neighbours, &
      dirichlet_size, dirichlet_indices, dirichlet_values, &
      integer_options, real_options) &
        BIND(c,NAME='FETI4ICreateInstance')
    IMPORT
    TYPE(C_PTR) :: instance             ! FETI4IInstance*   type in C (output)
    TYPE(C_PTR), VALUE :: matrix        ! FETI4IMatrix      type in C (input)
    INTEGER(KIND=FETI4IInt), VALUE :: size
    REAL(KIND=FETI4IReal) :: rhs(*)
    INTEGER(KIND=FETI4IInt) :: l2g(*)
    INTEGER(KIND=FETI4IMPIInt), VALUE :: neighbours_size
    INTEGER(KIND=FETI4IMPIInt) :: neighbours(*)
    INTEGER(KIND=FETI4IInt), VALUE :: dirichlet_size
    INTEGER(KIND=FETI4IInt) :: dirichlet_indices(*)
    REAL(KIND=FETI4IReal) :: dirichlet_values(*)
    INTEGER(KIND=FETI4IInt) :: integer_options(*)
    REAL(KIND=FETI4IReal) :: real_options(*)
  END SUBROUTINE FETI4ICreateInstance

  SUBROUTINE FETI4ISolve(instance, solution_size, solution) &
        BIND(c,NAME='FETI4ISolve')
    IMPORT
    TYPE(C_PTR), VALUE :: instance      ! FETI4IInstance    type in C (input)
    INTEGER(KIND=FETI4IInt), VALUE :: solution_size 
    REAL(KIND=FETI4IReal) :: solution(*)
  END SUBROUTINE FETI4ISolve

  SUBROUTINE FETI4IDestroy(ptr) &
        BIND(c,NAME='FETI4IDestroy')
    IMPORT
    TYPE(C_PTR) :: ptr                  ! void*   type in C
  END SUBROUTINE FETI4IDestroy



  SUBROUTINE TEST4IGetElementsInfo(elements, elementSize) &
        BIND(c,NAME='TEST4IGetElementsInfo')
    IMPORT
    INTEGER(KIND=FETI4IInt) :: elements
    INTEGER(KIND=FETI4IInt) :: elementSize
  END SUBROUTINE TEST4IGetElementsInfo

  SUBROUTINE TEST4IGetElement(index, indices, values) &
        BIND(c,NAME='TEST4IGetElement')
    IMPORT
    INTEGER(KIND=FETI4IInt), VALUE :: index
    INTEGER(KIND=FETI4IInt) :: indices(*)
    REAL(KIND=FETI4IReal) :: values(*)
  END SUBROUTINE TEST4IGetElement

  SUBROUTINE TEST4IGetInstanceInfo(rhs_size, dirichlet_size, neighbours_size) &
        BIND(c,NAME='TEST4IGetInstanceInfo')
    IMPORT
    INTEGER(KIND=FETI4IInt) :: rhs_size
    INTEGER(KIND=FETI4IInt) :: dirichlet_size
    INTEGER(KIND=FETI4IInt) :: neighour_size
  END SUBROUTINE TEST4IGetInstanceInfo

  SUBROUTINE TEST4IGetInstance(rhs, l2g, dirichlet_indices, dirichlet_values, neighbours) &
        BIND(c,NAME='TEST4IGetInstance')
    IMPORT
    REAL(KIND=FETI4IReal) :: rhs(*)
    INTEGER(KIND=FETI4IInt) :: l2g(*)
    INTEGER(KIND=FETI4IInt) :: dirichlet_indices(*)
    REAL(KIND=FETI4IReal) :: dirichlet_values(*)
    INTEGER(KIND=FETI4IInt) :: neighbours(*)
  END SUBROUTINE TEST4IGetInstance

END INTERFACE

