
SOLVER = "solver"

source_files = (
   "src/HTFETI-seq.cpp",
   "src/Cluster.cpp",
   "src/ConfigFile.cpp",
   "src/Domain.cpp",
   "src/FEM_Assembler.cpp",
   "src/IterSolver.cpp",
   "src/SparseDSS.cpp",
   "src/SparseMatrix.cpp",
   "src/SparseSolver.cpp",
   "src/TimeEval.cpp",
   "src/utils.cpp"
)

def configure(ctx):
    ctx.setenv(SOLVER, ctx.all_envs["mpi"].derive());

    ctx.env.append_unique("CXXFLAGS", [ "-openmp", "-DHFETI_SOLVER", "-DTM_BLOCK_START", "-DDEVEL", "-DLIB" ])

def build(ctx):
    ctx.env = ctx.all_envs[SOLVER]

    if ctx.env.SHARED_LIBS:
        ctx.shlib(
            source=source_files,
            target="essolver",
            install_path=ctx.ROOT + "/libs"
        )
    else:
        ctx.stlib(
            source=source_files,
            target="essolver"
        )

    ctx(
        export_includes = "src",
        name            = "solver_includes"
    )
