
SOLVER = "essolver"
SOLVER_MIC = SOLVER + "_mic"
SOLVER_CUDA = SOLVER + "_cuda"
SOLVER_PARDISO = SOLVER + "_pardiso"
SOLVER_PARDISO_MKL = SOLVER + "_pardiso_mkl"
SOLVER_MUMPS = SOLVER + "_mumps"

source_files = (
#   "src/HTFETI-seq.cpp",
   "src/Cluster.cpp",
   "src/ConfigFile.cpp",
   "src/Domain.cpp",
   "src/FEM_Assembler.cpp",
   "src/IterSolver.cpp",
   "src/SparseMatrix.cpp",
   "src/TimeEval.cpp",
   "src/utils.cpp",
   "src/DenseMatrixPack.cpp",
   "src/LinearSolver.cpp"
)

def configure(ctx):
    ctx.setenv(SOLVER, ctx.all_envs[""].derive());
    ctx.env.append_unique("CXXFLAGS", [ "-DXE6", "-DHFETI_SOLVER", "-DTM_BLOCK_START", "-DDEVEL", "-DLIB", "-DCUDA" ])

    ctx.setenv(SOLVER_MIC, ctx.all_envs[SOLVER].derive());
    ctx.env.append_unique("CXXFLAGS", [ "-DMIC" ])

    ctx.setenv(SOLVER_CUDA, ctx.all_envs[SOLVER].derive());
    ctx.env.append_unique("CXXFLAGS", [ "-DCUDA" ])

    ctx.setenv(SOLVER_PARDISO, ctx.all_envs[SOLVER].derive());

    ctx.setenv(SOLVER_PARDISO_MKL, ctx.all_envs[SOLVER].derive());
    ctx.env.append_unique("CXXFLAGS", [ "-DCUDA" ]) # titan fix 
    
    ctx.setenv(SOLVER_MUMPS, ctx.all_envs[SOLVER].derive());

def build(ctx):
    # DEFAULT SOLVER
    ctx.env     = ctx.all_envs[SOLVER_PARDISO]
    sources     = source_files + ("src/SparseSolver.cpp",)
    target      = SOLVER_PARDISO

    if ctx.options.mic:
        ctx.env = ctx.all_envs[SOLVER_MIC]
        sources = source_files + ("src/SparseSolver.cpp",)
        target  = SOLVER_MIC

    if ctx.options.cuda:
        ctx.env = ctx.all_envs[SOLVER_CUDA]
        sources = source_files + ("src/SparseSolver.cpp",)
        target  = SOLVER_CUDA

    if ctx.options.mumps:
        ctx.env = ctx.all_envs[SOLVER_MUMPS]
        sources = source_files + ("src/SparseSolverMumps.cpp",)
        target  = SOLVER_MUMPS

    if ctx.options.pardiso:
        ctx.env = ctx.all_envs[SOLVER_PARDISO]
        sources = source_files + ("src/SparseSolver.cpp",)
        target  = SOLVER_PARDISO

    if ctx.options.pardiso_mkl:
        ctx.env = ctx.all_envs[SOLVER_PARDISO]
        sources = source_files + ("src/SparseSolverPardisoMKL.cpp",)
        target  = SOLVER_PARDISO_MKL


    ctx.lib(
        source          = sources,
        target          = target,
        install_path    = ctx.LIBRARIES,
        use             = "espreso_includes"
    )

    ctx(
        export_includes = "src",
        name            = "solver_includes"
    )

