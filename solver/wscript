
SOLVER = "solver"

source_files = (
   "src/Cluster.cpp",
   "src/Domain.cpp",
   "src/IterSolver.cpp",
   "src/SparseMatrix.cpp",
   "src/TimeEval.cpp",
   "src/utils.cpp",
   "src/DenseMatrixPack.cpp",
   "src/LinearSolver.cpp"
)

def configure(ctx):
    ctx.setenv(SOLVER, ctx.all_envs[""].derive());
    ctx.env.append_unique("DEFINES", [ "XE6", "TM_BLOCK_START", "DEVEL"])
    ctx.append_solver_attributes(ctx)


def build(ctx):
    ctx.env = ctx.all_envs[SOLVER]

    if ctx.env.SOLVER == "MIC":
        sources = source_files + ("src/SparseSolver.cpp",)

    if ctx.env.SOLVER == "CUDA":
        sources = source_files + ("src/SparseSolver.cpp",)

    if ctx.env.SOLVER == "MUMPS":
        sources = source_files + ("src/SparseSolverMumps.cpp",)

    if ctx.env.SOLVER == "PARDISO":
        sources = source_files + ("src/SparseSolver.cpp",)

    if ctx.env.SOLVER == "MKL":
        sources = source_files + ("src/SparseSolverPardisoMKL.cpp",)


    ctx.lib(
        source          = sources,
        target          = "essolver_{0}".format(ctx.env.SOLVER),
        install_path    = ctx.LIBRARIES,
        use             = "espreso_includes"
    )

