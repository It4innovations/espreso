
SOLVER = "solver"

source_files = (
   "src/Cluster.cpp",
   "src/Domain.cpp",
   "src/IterSolver.cpp",
   "src/SparseMatrix.cpp",
   "src/TimeEval.cpp",
   "src/utils.cpp",
   "src/DenseMatrixPack.cpp",
   "src/LinearSolver.cpp"
)

def configure(ctx):
    ctx.env.append_unique("DEFINES", [ "XE6", "TM_BLOCK_START", "DEVEL"])
    ctx.env.append_unique("LIBPATH", [ "../libs" ])
    ctx.env.append_unique("STLIBPATH", [ "../libs" ])

    if ctx.env.INT_WIDTH == 32:
        mkl = "mkl_intel_lp64"
    if ctx.env.INT_WIDTH == 64:
        mkl = "mkl_intel_ilp64"

    if ctx.env.SOLVER == "MKL":
        ctx.env.append_unique("LIB", [ "metis", mkl, "mkl_core", "mkl_intel_thread", "pthread" ])

    if ctx.env.SOLVER == "PARDISO":
        ctx.env.append_unique("LIB", [ "metis", "pardiso500-INTEL120-X86-64", mkl, "mkl_core", "mkl_intel_thread", "pthread" ])
        ctx.env.append_value("STLIB", [ "ifcore" ])

    if ctx.env.SOLVER == "MIC":
        ctx.env.append_unique("LIB", [ "imf", "intlc", "svml", "irng", "metis", mkl, "mkl_core", "mkl_intel_thread", "pthread" ])
        ctx.env.append_unique("STLIB", [ "ifcore" ])
        ctx.env.append_unique("LINKFLAGS", [ "-offload-option,mic,ld,-L{0}/lib/mic -lmkl_intel_lp64 -lmkl_core -lmkl_intel_thread".format(os.environ['MKLROOT']) ])

    if ctx.env.SOLVER == "CUDA":
        #ctx.env.append_unique("LIBPATH", [ "/usr/local/cuda-7.0/lib64" ])
        ctx.env.append_unique("LIB", [ "cudart", "cublas", "metis", mkl, "mkl_core", "mkl_intel_thread", "pthread" ])

    if ctx.env.SOLVER == "MUMPS":
        ctx.env.append_unique("LIB", [ "metis", "mkl_scalapack_lp64", "mkl_blacs_intelmpi_lp64", mkl, "mkl_core", "mkl_intel_thread", "pthread", "ifcore" ])
        ctx.env.append_unique("STLIB", [ "dmumps", "mumps_common", "pord", "esmumps", "scotch", "scotcherr",  ])


def build(ctx):
    if ctx.env.SOLVER == "MIC":
        sources = source_files + ("src/SparseSolver.cpp",)

    if ctx.env.SOLVER == "CUDA":
        sources = source_files + ("src/SparseSolver.cpp",)

    if ctx.env.SOLVER == "MUMPS":
        sources = source_files + ("src/SparseSolverMumps.cpp",)

    if ctx.env.SOLVER == "PARDISO":
        sources = source_files + ("src/SparseSolver.cpp",)

    if ctx.env.SOLVER == "MKL":
        sources = source_files + ("src/SparseSolverPardisoMKL.cpp",)


    ctx.lib(
        source          = sources,
        target          = "essolver_{0}".format(ctx.env.SOLVER),
        install_path    = ctx.LIBRARIES,
        use             = "espreso_includes"
    )

