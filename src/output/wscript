
import os
import glob

def configure(ctx):
    ctx.env.append_unique("CXXFLAGS", [ "-I" + include for include in ctx.env["VTK::INCLUDE"] ])
    ctx.env.append_unique("LIBPATH", ctx.env["VTK::LIBPATH"])

    includes = []
    for file in glob.glob(ctx.path.abspath() + "/resultstore/libvtk/*.cpp"):
        for line in open(file, "r"):
            if line.find("#include") != -1:
                if line.find("#include \"vtk") != -1:
                    includes += [ line ]

    ctx.env.VTK = ctx.check_cc(
        fragment    = "{0}int main() {{ return 0; }}\n".format("".join(includes)),
        mandatory   = False,
        execute     = False,
        msg         = "Checking for VTK headers",
        errmsg      = "not found - set path to VTK headers (parameter VTK::INCLUDE)",
        okmsg       = "found"
    )

    vtklibs = []
    if len(ctx.env["VTK::LIBPATH"]) == 1:
        vtklibs = [ lib.split('/')[-1][3:-3] for lib in glob.glob(ctx.env["VTK::LIBPATH"][0] + "/*.so") ]

    ctx.start_msg("Checking for VTK libraries")
    if len(vtklibs): # Improve testing VTK libraries
        ctx.end_msg("found")
    else:
        ctx.end_msg("not found - set path to VTK libraries (parameter VTK::LIBPATH)", color='YELLOW')
        ctx.env.VTK = False

    ctx.env.append_unique("LIB", vtklibs)

def build(ctx):

    ctx.objects(
        source = ctx.path.ant_glob('datastore/**/*.cpp'),
        target = "datastore",
        use    = "espreso_includes"
    )

    if ctx.env.VTK:
        ctx.objects(
            source = ctx.path.ant_glob('*.cpp') + ctx.path.ant_glob('resultstore/*.cpp') + ctx.path.ant_glob('resultstore/libvtk/*.cpp'),
            target = "resultstore",
            use    = "espreso_includes"
        )
    else:
        ctx.objects(
            source = ctx.path.ant_glob('*.cpp') + ctx.path.ant_glob('resultstore/*.cpp') + ctx.path.ant_glob('resultstore/espreso/*.cpp'),
            target = "resultstore",
            use    = "espreso_includes"
        )
