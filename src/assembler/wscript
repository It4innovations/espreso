
import os
import sys
import glob

def configure(ctx):
    ctx.env.append_unique("CXXFLAGS", [ "-I" + include for include in ctx.env["HYPRE::INCLUDE"] ])
    ctx.env.append_unique("LIBPATH", ctx.env["HYPRE::LIBPATH"])

    ctx.env.HYPRE = ctx.check_cc(
        fragment    = "#include \"LLNL_FEI_Impl.h\"\nint main() {{ return 0; }}\n",
        mandatory   = False,
        execute     = False,
        msg         = "Checking for HYPRE headers",
        errmsg      = "not found - set path to HYPRE headers (parameter HYPRE::INCLUDE)",
        okmsg       = "found"
    )

    hyprelibs = []
    if len(ctx.env["HYPRE::LIBPATH"]) == 1:
        hyprelibs = [ lib.split('/')[-1][3:-3] for lib in glob.glob(ctx.env["HYPRE::LIBPATH"][0] + "/*.so") ]

    ctx.start_msg("Checking for HYPRE libraries")
    if len(hyprelibs):
        ctx.end_msg("found")
    else:
        ctx.end_msg("not found - set path to HYPRE libraries (parameter HYPRE::LIBPATH)", color='YELLOW')
        ctx.env.HYPRE = False

    ctx.env.append_unique("LIB", hyprelibs)

    if ctx.env.HYPRE:
        ctx.env.append_unique("DEFINES", [ "HAVE_HYPRE" ])

def build(ctx):
    base = ctx.path.ant_glob(['constraints/**/*.cpp', 'instance/*.cpp', 'physics/*.cpp'])
    library = ctx.path.ant_glob(['instance/precomputed/**/*.cpp', 'physics/precomputed/**/*.cpp'])
    rest = list(set(ctx.path.ant_glob(['**/*.cpp'])) - set(base + library))

    ctx.objects(
        source = base,
        target = "assembler_base",
        use    = "espreso_includes"
    )
    ctx.objects(
        source = library,
        target = "assembler_api",
        use    = "espreso_includes assembler_base"
    )
    ctx.objects(
        source = rest,
        target = "assembler",
        use    = "espreso_includes assembler_base"
    )
