
from waflib.Tools.ccroot import link_task

# Reconfigure build string to fit our requirements
class cxxprogram(link_task):
    vars    = ['LINKDEPS']
    ext_out = ['.bin']
    inst_to = '${BINDIR}',
    run_str = '${LINK_CXX} \
               ${LINKFLAGS} \
               ${CXXLNK_SRC_F}${SRC} \
               ${CXXLNK_TGT_F}${TGT[0].abspath()} \
               ${RPATH_ST:RPATH} \
               ${FRAMEWORKPATH_ST:FRAMEWORKPATH} \
               ${FRAMEWORK_ST:FRAMEWORK} \
               ${ARCH_ST:ARCH} \
               ${SHLIB_MARKER} \
               ${LIBPATH_ST:LIBPATH} \
               ${LIB_ST:LIB} \
               ${LDFLAGS} \
               ${STLIB_MARKER} \
               -Wl,--start-group \
               ${STLIBPATH_ST:STLIBPATH} \
               ${STLIB_ST:STLIB} \
               -Wl,--end-group \
               ${SHLIB_MARKER}'

class cxxshlib(cxxprogram):
    pass

def configure(ctx):
    pass


def build(ctx):

    ctx.objects(
        source = ("factory/factory.cpp",),
        target = "factory",
        use    = "espreso_includes"
    )

    ctx.program(
        source       = "espreso.cpp",
        target       = "espreso",
        use          = "espreso_includes basis config solver generator ansys_in espreso_in openfoam_in vtk_out generic_out paraview_out mesh bem assembler factory",
        install_path = ctx.ROOT
    )

    ctx.program(
        source       = "decomposer.cpp",
        target       = "decomposer",
        use          = "espreso_includes basis config solver generator ansys_in espreso_in openfoam_in espreso_out vtk_out generic_out paraview_out mesh bem assembler factory",
        install_path = ctx.ROOT
    )
    return
 
    ctx.lib = (ctx.stlib, ctx.shlib)[ctx.env.LIBTYPE == "SHARED"]

    ctx.lib(
        source       = "apiwrapper/wrapper.cpp",
        target       = "feti4i",
        use          = "espreso_includes basis config api_in solver mesh bem assembler",
        install_path = ctx.ROOT + "/libespreso"
    )


