import os

source_files = (
   "generic/Domain.cpp",
   "generic/SparseMatrix.cpp",
   "generic/utils.cpp",
   "generic/LinearSolver.cpp",
   "specific/cluster.cpp",
   "specific/itersolver.cpp"
)

def configure(ctx):
    ctx.env.append_unique("DEFINES", [ "XE6", "DEVEL"])

    mkl = ("mkl_intel_lp64", "mkl_intel_ilp64")[ctx.env.INT_WIDTH == 64]

    if ctx.env.SOLVER == "MKL":
        LIBTYPE = ("LIB", "STLIB")[ctx.env.LIBTYPE == "STATIC"]

        ctx.env.append_unique(LIBTYPE, [ mkl, "mkl_core", "mkl_intel_thread" ])
        ctx.env.append_unique("LIB", [ "pthread" ])

    if ctx.env.SOLVER == "PARDISO":
        LIBTYPE = ("LIB", "POSTSTLIB")[ctx.env.LIBTYPE == "STATIC"]

        ctx.env.append_unique("LIB", [ "pardiso500-INTEL120-X86-64" ]) # PARDISO needs to be linked before MKL
        ctx.env.append_unique(LIBTYPE, [ mkl, "mkl_core", "mkl_intel_thread" ])
        ctx.env.append_unique("LIB", [ "pthread" ])
        ctx.env.append_value("POSTSTLIB", [ "ifcore" ])

    if ctx.env.SOLVER == "MIC":
        ctx.env.append_unique("LIB", [ "imf", "intlc", "svml", "irng", mkl, "mkl_core", "mkl_intel_thread", "pthread" ])
        ctx.env.append_unique("POSTSTLIB", [ "ifcore" ])
        ctx.env.append_unique("LINKFLAGS", ["-offload-option,mic,ld,-L{0}/lib/mic -lmkl_intel_ilp64  -lmkl_core -lmkl_intel_thread ".format(os.environ['MKLROOT']) ])

    if ctx.env.SOLVER == "CUDA":
        LIBTYPE = ("LIB", "POSTSTLIB")[ctx.env.LIBTYPE == "STATIC"]

        ctx.env.append_unique("LIB", [ "cudart", "cublas", "cusolver", "cusparse" ])
        ctx.env.append_unique(LIBTYPE, [ mkl, "mkl_core", "mkl_intel_thread" ])
        ctx.env.append_unique("LIB", [ "pthread" ])

    if ctx.env.SOLVER == "CUDA_7":
        LIBTYPE = ("LIB", "STLIB")[ctx.env.LIBTYPE == "STATIC"]
        ctx.env.append_unique(LIBTYPE, [ "cudart", "cublas", "cusolver", "cusparse", mkl, "mkl_core", "mkl_intel_thread", "pthread" ])

    if ctx.env.SOLVER == "MUMPS":
        ctx.env.append_unique("LIB", [ "mkl_scalapack_lp64", "mkl_blacs_intelmpi_lp64", mkl, "mkl_core", "mkl_intel_thread", "pthread", "ifcore" ])
        ctx.env.append_unique("STLIB", [ "dmumps", "mumps_common", "pord", "esmumps", "scotch", "scotcherr",  ])


def build(ctx):
    if ctx.env.SOLVER == "MIC":
        sources = source_files + ("specific/cpu/SparseSolverMKL.cpp",
        "specific/acc/mic.cpp", "specific/acc/clusteracc.cpp",
        "specific/acc/itersolveracc.cpp", "specific/acc/DenseMatrixPack.cpp",
        "specific/cpu/DenseSolverMKL.cpp")

    if ctx.env.SOLVER == "CUDA":
        sources = source_files + (
            "specific/cpu/SparseSolverMKL.cpp",
            "specific/acc/clusterGPU.cpp",
            "specific/acc/itersolverGPU.cpp",
            "specific/acc/DenseSolverCUDA.cpp",
            "specific/cpu/DenseSolverMKL.cpp")

    if ctx.env.SOLVER == "CUDA_7":
        sources = source_files + (
            "specific/cpu/SparseSolverMKL.cpp",
            "specific/acc/clusterGPU.cpp",
            "specific/acc/itersolverGPU.cpp",
            "specific/acc/DenseSolverCUDA.cpp",
            "specific/cpu/DenseSolverMKL.cpp")

    if ctx.env.SOLVER == "MUMPS":
        sources = source_files + ("specific/cpu/solvermumps.cpp", "specific/cpu/clustercpu.cpp", "specific/cpu/itersolvercpu.cpp")

    if ctx.env.SOLVER == "PARDISO":
        sources = source_files + ("specific/cpu/solverpardiso.cpp", "specific/cpu/clustercpu.cpp", "specific/cpu/itersolvercpu.cpp", "specific/cpu/DenseSolverMKL.cpp")

    if ctx.env.SOLVER == "MKL":
        sources = source_files + ("specific/cpu/SparseSolverMKL.cpp", "specific/cpu/clustercpu.cpp", "specific/cpu/itersolvercpu.cpp", "specific/cpu/DenseSolverMKL.cpp")


    ctx.objects(
        source = sources,
        target = "solver",
        use    = "espreso_includes"
    )

