import os

source_files = (
   "generic/Domain.cpp",
   "generic/SparseMatrix.cpp",
   "generic/utils.cpp",
   "generic/FETISolver.cpp",
   "specific/cluster.cpp",
   "specific/itersolver.cpp"
)

def configure(ctx):
    ctx.env.append_unique("DEFINES", [ "XE6", "DEVEL"])

    def link_MKL():
        mkl = ("mkl_intel_lp64", "mkl_intel_ilp64")[ctx.env.INT_WIDTH == 64]
        threading = ("mkl_gnu_thread", "mkl_intel_thread")[ctx.env.CXX_NAME == "icc"]
        if ctx.env.LIBTYPE == "STATIC":
            ctx.check_stlib(mkl, [ "mkl_core", threading ])
            ctx.env.append_unique("STLIB", [ mkl, "mkl_core", threading ])
        else:
            ctx.check_lib(mkl, [ "mkl_core", threading ])
            ctx.env.append_unique("LIB", [ mkl, "mkl_core", threading ])
        if ctx.env.CXX_NAME == "gcc":
            ctx.check_lib("gomp")
            ctx.env.append_unique("LIB", [ "gomp" ])
        ctx.check_lib("pthread")
        ctx.env.append_unique("LIB", [ "pthread" ])


    if ctx.env.SOLVER == "MKL":
        link_MKL()


    if ctx.env.SOLVER == "PARDISO":
        pardiso = "pardiso500-INTEL1301-X86-64"
        ctx.check_lib(pardiso, [ "mkl_intel_lp64", "mkl_core", "mkl_intel_thread", "ifcore" ])
        ctx.env.append_unique("LIB", [ pardiso ]) # PARDISO needs to be linked before MKL
        link_MKL()
        ctx.check_lib("ifcore")
        ctx.env.append_value("LIB", [ "ifcore" ])


    if ctx.env.SOLVER == "MIC":
        mkl = ("mkl_intel_lp64", "mkl_intel_ilp64")[ctx.env.INT_WIDTH == 64]
        for lib in [ "imf", "intlc", "svml", "irng" ]:
            ctx.check_lib(lib)
            ctx.env.append_unique("LIB", [ lib ])

        link_MKL()
        ctx.check_lib("ifcore")
        ctx.env.append_unique("LIB", [ "ifcore" ])
        ctx.env.append_unique("LINKFLAGS", ["-qoffload-option,mic,ld,-L{0}/lib/mic -l{1} -lmkl_core -lmkl_sequential ".format(os.environ['MKLROOT'], mkl) ])


    if ctx.env.SOLVER == "CUDA" or ctx.env.SOLVER == "CUDA_7":
        for header in [ "cusolverSp.h", "cusolverSp_LOWLEVEL_PREVIEW.h" ]:
            ctx.check_header(header)

        for lib in [ "cudart", "cublas", "cusolver", "cusparse" ]:
            ctx.check_lib(lib)
            ctx.env.append_unique("LIB", [ lib ])

        link_MKL()


    if ctx.env.SOLVER == "MUMPS":
        for lib in [ "mkl_scalapack_lp64", "mkl_blacs_intelmpi_lp64" ]:
            ctx.check_lib(lib)
            ctx.env.append_unique("LIB", [ lib ])
        link_MKL()
        ctx.check_lib("ifcore")
        ctx.env.append_unique("LIB", [ "ifcore" ])

        for lib in [ "dmumps", "mumps_common", "pord", "esmumps", "scotch", "scotcherr" ]:
            ctx.check_stlib(lib)
            ctx.env.append_unique("STLIB", [ lib ])


    if ctx.env.SOLVER == "DISSECTION":
        ctx.env.append_unique("CXXFLAGS", [ "-I{0}/tools/dissection/src".format(ctx.ROOT) ])
        link_MKL()

        for lib in [ "Dissection", "qd", "scotch", "scotcherr" ]:
            if ctx.env.LIBTYPE == "SHARED":
                ctx.env.append_unique("LIB", [ lib ])
            else:
                ctx.env.append_unique("STLIB", [ lib ])

def build(ctx):
    if ctx.env.SOLVER == "MIC":
        sources = source_files + (
            "specific/cpu/SparseSolverMKL.cpp",
            "specific/acc/mic.cpp",
            "specific/acc/clusteracc.cpp",
            "specific/acc/superclusteracc.cpp",
            "specific/acc/itersolveracc.cpp",
            "specific/acc/DenseMatrixPack.cpp",
            "specific/cpu/DenseSolverMKL.cpp",
            "specific/acc/SparseMatrixPack.cpp")

    if ctx.env.SOLVER == "CUDA":
        sources = source_files + (
            "specific/cpu/SparseSolverMKL.cpp",
            "specific/acc/SparseSolverCUDA.cpp",
            "specific/acc/clusterGPU.cpp",
            "specific/acc/itersolverGPU.cpp",
            "specific/acc/DenseSolverCUDA.cpp",
            "specific/cpu/DenseSolverMKL.cpp")

    if ctx.env.SOLVER == "CUDA_7":
        sources = source_files + (
            "specific/cpu/SparseSolverMKL.cpp",
            "specific/acc/clusterGPU.cpp",
            "specific/acc/itersolverGPU.cpp",
            "specific/acc/DenseSolverCUDA.cpp",
            "specific/cpu/DenseSolverMKL.cpp")

    if ctx.env.SOLVER == "MUMPS":
        sources = source_files + (
            "specific/cpu/solvermumps.cpp",
            "specific/cpu/clustercpu.cpp",
            "specific/cpu/itersolvercpu.cpp")

    if ctx.env.SOLVER == "PARDISO":
        sources = source_files + (
            "specific/cpu/solverpardiso.cpp",
            "specific/cpu/clustercpu.cpp",
            "specific/cpu/itersolvercpu.cpp",
            "specific/cpu/DenseSolverMKL.cpp")

    if ctx.env.SOLVER == "MKL":
        sources = source_files + (
            "specific/cpu/SparseSolverMKL.cpp",
            "specific/cpu/clustercpu.cpp",
            "specific/cpu/itersolvercpu.cpp",
            "specific/cpu/DenseSolverMKL.cpp")

    if ctx.env.SOLVER == "DISSECTION":
        sources = source_files + (
            "specific/cpu/SparseSolverDissection.cpp",
            "specific/cpu/SparseSolverMKL.cpp",
            "specific/cpu/clustercpu.cpp",
            "specific/cpu/itersolvercpu.cpp",
            "specific/cpu/DenseSolverMKL.cpp")

    ctx.objects(
        source = sources,
        target = "solver",
        use    = "espreso_includes"
    )

