
def options(opt):
    libraries = ["openmpi", "intelmpi", "mpich"]
    opt.compiler.add_option("--mpi-lib",
        action="store",
        metavar=libraries,
        choices=libraries,
        help="Set the MPI library version. Use this option when the auto-detection mechanism fails.")

def configure(ctx):
    # Check SIMD instruction set
    code = '''
        #include <cstdio>
        int main() {
        #if !defined(SIMD_OFF) && defined(__AVX512F__) && defined(__AVX512DQ__)
        printf("AVX512");
        #elif !defined(SIMD_OFF) && defined(__AVX__)
        printf("AVX");
        #elif !defined(SIMD_OFF) && defined(__SSE2__)
        printf("SSE2");
        #elif !defined(SIMD_OFF) && defined(__ARM_FEATURE_SVE)
        printf("SVE");
        #else
        printf("NONE");
        #endif
        return 0;
        }
    '''

    svesize = '''
        #include <cstdio>
        #include <arm_sve.h>
        int main(int argc, char **argv)
        {
            printf("%d", __ARM_FEATURE_SVE_BITS);
            return 0;
        }
    '''

    svefixed = '''
        #include <arm_sve.h>
        typedef svfloat64_t VEC __attribute__((arm_sve_vector_bits(512)));
        int main(int argc, char **argv)
        {
            struct { VEC vec; } value;
            return 0;
        }
    '''

    ctx.env.SIMD = ctx.check_cxx(
        mandatory   = False,
        msg         = 'Checking for SIMD intrinsics',
        fragment    = code,
        define_ret  = True,
        execute     = True,
        okmsg       = lambda ret: str(ret["success"]))

    if ctx.env.SIMD == "SVE":
        size = ctx.check_cxx(
            msg         = 'Checking for SVE vector length',
            fragment    = svesize,
            define_ret  = True,
            execute     = True,
            okmsg       = lambda ret: str(ret["success"]))
        ctx.env.append_unique("CXXFLAGS", [ "-msve-vector-bits="+size ])

        fixedsize = ctx.check_cxx(
            msg         = 'Checking for SVE of fixed size',
            mandatory   = False,
            fragment    = svefixed)

        if fixedsize:
            ctx.env.append_unique("CXXFLAGS", [ "-DSIMD_ARM_SVE_GENERAL" ])
        else:
            ctx.env.append_unique("CXXFLAGS", [ "-DSIMD_ARM_SVE_ARRAY" + size ])
