
def options(opt):
    opt.other.add_option("--cuda-arch", action="store", type="string", help="CUDA architecture.")

def configure(ctx):
    if ctx.link_cxx(name="cuda", header_name=["cuda_runtime_api.h", "cusolverSp.h", "cusolverSp_LOWLEVEL_PREVIEW.h"], libs=["cublas", "cudart", "cusparse", "cusolver", "nvToolsExt"]):
        ctx.env.NVCC = ctx.find_program("nvcc")

        if ctx.options.cuda_arch:
            arch = "-arch=" + ctx.options.cuda_arch
            ctx.msg("CUDA architecture version", ctx.options.cuda_arch)
        else:
            def okmsg(kw):
                return "sm_" + str(kw["success"])

            arch = ctx.check_cxx(fragment='''
                    #include "cuda_runtime_api.h"
                    #include <cstdio>
                    int main() { cudaDeviceProp deviceProp; cudaGetDeviceProperties(&deviceProp, 0); printf("%d%d", deviceProp.major, deviceProp.minor); return 0; }''',
                lib         = "cudart",
                execute     = True,
                define_ret  = True,
                mandatory   = False,
                msg         = "Checking for 'cuda' architecture",
                errmsg      = "default",
                okmsg       = okmsg)

            if arch:
                arch = "-arch=" + arch
            else:
                arch = ""

        ctx.env.NVCCFLAGS = [ "-dw", "-lineinfo", arch, "--use_fast_math", "-std=c++11", "-O3", "-Xcompiler", "-fPIC" ]
