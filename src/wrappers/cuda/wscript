
import os

def options(opt):
    opt.compiler.add_option("--cudaarch",
        action="store",
        type="string",
        default=os.getenv("CUDAARCH") or "native")
    opt.compiler.add_option("--cuda-allow-unsupported-compiler",
        action="store_true",
        default=os.getenv("ESPRESO_CUDA_ALLOW_UNSUPPORTED_COMPILER") or False)

def configure(ctx):
    ctx.env.NVCC = ctx.find_program("nvcc", mandatory=False)
    ctx.env.NVCCFLAGS = [ "-std=c++17", "-O2", "-Xcompiler", "-fPIC", "-ccbin=" + ctx.env.COMPILER_CXX, "--extended-lambda" ]
    if ctx.options.cuda_allow_unsupported_compiler:
        ctx.env.NVCCFLAGS.append("--allow-unsupported-compiler")
    ctx.env.append_unique("NVCCFLAGS", [ "-arch=" + ctx.options.cudaarch ])

    if ctx.options.use_cusparse_legacy:
        ctx.env.append_unique("DEFINES_CUDA", [ "USE_CUSPARSE_LEGACY" ])

    headers = [ "cuda_runtime.h" ]
    libs = [ "cudart", "cusparse", "cublas", "cusolver" ]
    ctx.check_cxx(mandatory=False, msg="Checking for 'cuda'", okmsg=" ".join(libs), define_name="HAVE_CUDA", header_name=headers, lib=libs, uselib_store="CUDA", global_define=0)
