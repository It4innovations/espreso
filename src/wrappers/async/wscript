
def options(opt):
    opt.compiler.add_option("--without-async",
        action="store_true",
        default=False,
        help="Build without asynchronous output.")

def configure(ctx):
    def check():
        return ctx.check_cxx(
            fragment='''
                #include "mpi.h"
                #include <cstdio>
                int main(int argc, char** argv) { int provided = 3; MPI_Init_thread(&argc, &argv, MPI_THREAD_MULTIPLE, &provided); printf("%d\\n", provided); MPI_Finalize(); return 0; }
            ''',
            execute=True,
            define_ret=True,
            define_name="",
            msg="Getting MPI_Init_thread provided level")

    provided = 3
#    if not ctx.options.without_async:
#        provided = 3
#        provided = check()

    provided = int(provided)

    if provided is None or provided == 0:
        provided = "MPI_THREAD_SINGLE"
    if provided == 1:
        provided = "MPI_THREAD_FUNNELED"
    if provided == 2:
        provided = "MPI_THREAD_SERIALIZED"
    if provided == 3:
        provided = "MPI_THREAD_MULTIPLE"

#    ctx.msg("Provided MPI/Threads support", provided)
#    if provided != "MPI_THREAD_MULTIPLE":
#        ctx.msg("ASYNC library status", "DISABLED", color="YELLOW")
#        ctx.options.without_async = True
#    else:
#        ctx.msg("Library ASYNC status", "ENABLED")

    ctx.env.append_unique("DEFINES_INFO", [ "__MPI_Init_thread_level__="+provided ])

    if not ctx.options.without_async:
        ctx.env.append_unique("DEFINES_ASYNC", [ "HAVE_ASYNC" ])
        ctx.env.append_unique("INCLUDES_ASYNC", [ "src/wrappers/async" ])
