
stages:
  - build
  - solver
  - release

.ws_build:
  stage: build
  tags:
    - ws
  before_script:
    - sh dependencies/clone.metis.sh
    - sh dependencies/clone.parmetis.sh

.ws_solver:
  extends: .ws_build
  stage: solver

WS_DUMMY32:
  extends: .ws_build
  script:
    - . env/workstation.openmpi.32.sh
    - ./waf configure --skip-suitesparse --skip-mkl --skip-blas --skip-lapack
    - ./waf -j8

WS_DUMMY64:
  extends: .ws_build
  script:
    - . env/workstation.openmpi.64.sh
    - ./waf configure --skip-suitesparse --skip-mkl --skip-blas --skip-lapack --intwidth=64
    - ./waf -j8

WS_FOSS32:
  extends: .ws_build
  script:
    - . env/workstation.openmpi.32.sh
    - ./waf configure
    - ./waf -j 8
    - sh tests/run.basic.sh

WS_FOSS64:
  extends: .ws_build
  script:
    - . env/workstation.openmpi.64.sh
    - ./waf configure --intwidth=64
    - ./waf -j 8
    - sh tests/run.basic.sh

WS_MKL32:
  extends: .ws_build
  script:
    - . env/workstation.openmpi.mkl.32.sh
    - ./waf configure
    - ./waf -j 8
    - sh tests/run.basic.sh

WS_MKL64:
  extends: .ws_build
  script:
    - . env/workstation.openmpi.mkl.64.sh
    - ./waf configure
    - ./waf -j 8
    - sh tests/run.basic.sh

WS_INTEL32:
  extends: .ws_build
  script:
    - . env/workstation.intel.32.sh
    - ./waf configure
    - ./waf -j 8
    - sh tests/run.basic.sh

WS_INTEL64:
  extends: .ws_build
  script:
    - . env/workstation.intel.64.sh
    - ./waf configure --intwidth=64
    - ./waf -j 8
    - sh tests/run.basic.sh

WS_ASSEMBLER32:
  extends: .ws_solver
  script:
    - . env/workstation.intel.32.sh
    - ./waf configure
    - ./waf -j 8
    - sh tests/run.assembler.sh

WS_PHYSICAL_SOLVER32:
  extends: .ws_solver
  script:
    - . env/workstation.intel.32.sh
    - ./waf configure
    - ./waf -j 8
    - sh tests/run.physical_solver.sh

WS_FETI32:
  extends: .ws_solver
  script:
    - . env/workstation.openmpi.32.sh
    - ./waf configure
    - ./waf -j 8
    - sh tests/run.feti.sh

WS_FETI64:
  extends: .ws_solver
  script:
    - . env/workstation.openmpi.64.sh
    - ./waf configure --intwidth=64
    - ./waf -j 8
    - sh tests/run.feti.sh

.cs_build:
  stage: build
  tags:
    - cs
  before_script:
    - salloc -A $PROJECT_ID -p p01-arm -N 1 -n 48 -J $CI_JOB_ID --no-shell
    - export SLURM_JOB_ID="$(squeue -o %A -h -t R -n $CI_JOB_ID)"
    - sh dependencies/clone.all.sh
    - export PATH=/mnt/proj3/open-28-64/gitlab-runner/aarch64/nose2/bin/:$PATH
    - echo "#!/bin/bash" >> job.$CI_JOB_ID.sh
    - echo ". env/it4i.cs.a64fx.modulepath.sh" >> job.$CI_JOB_ID.sh
  after_script:
    - scancel "$(squeue -o %A -h -t R -n $CI_JOB_ID)"

.CS_FOSS32:
  extends: .cs_build
  script:
    - echo ". env/it4i.cs.a64fx.openmpi.32.sh" >> job.$CI_JOB_ID.sh
    - echo "./waf configure" >> job.$CI_JOB_ID.sh
    - echo "./waf" >> job.$CI_JOB_ID.sh
    - echo "sh tests/run.basic.sh" >> job.$CI_JOB_ID.sh
    - srun sh job.$CI_JOB_ID.sh

.CS_FOSS64:
  extends: .cs_build
  script:
    - echo ". env/it4i.cs.a64fx.openmpi.64.sh" >> job.$CI_JOB_ID.sh
    - echo "./waf configure --intwidth=64" >> job.$CI_JOB_ID.sh
    - echo "./waf" >> job.$CI_JOB_ID.sh
    - echo "sh tests/run.basic.sh" >> job.$CI_JOB_ID.sh
    - srun sh job.$CI_JOB_ID.sh

.GITHUB:
  stage: release
  script:
    - if ! git remote | grep release > /dev/null; then
        git remote add release git@github.com:It4innovations/espreso.git;
      fi
