
import os

TOOLS = "tools"

def configure(ctx):
    ctx.setenv(TOOLS, ctx.all_envs[""].derive())

    ctx.env.METIS = dict()
    ctx.env.SCOTCH = dict()
    ctx.env.MUMPS = dict()

    # there is problem with -C option. Hence, 'cd + path' is used
    ctx.env.PREFIX = "prefix=" + ctx.ROOT

    ctx.env.METIS["path"]  = ctx.ROOT + "/tools/metis-5.1.0/"
    ctx.env.SCOTCH["path"] = ctx.ROOT + "/tools/scotch_6.0.4/src"
    ctx.env.MUMPS["path"]  = ctx.ROOT + "/tools/MUMPS_5.0.1"

    ctx.env.METIS["libs"]  = [ "metis" ]
    ctx.env.SCOTCH["libs"] = [ "scotch", "scotcherr", "scotcherrexit", "esmumps" ]
    ctx.env.MUMPS["libs"]  = [ "dmumps", "mumps_common", "pord" ]

    if ctx.env.LIBTYPE == "STATIC":
        ctx.env.METIS["params"] = ctx.env.PREFIX
    else:
        ctx.env.METIS["params"] = ctx.env.PREFIX + " shared=1"

    ctx.env.SCOTCH["params"] = ""

    cc = ctx.env.CC[0]
    fc = ctx.env.FC[0]

    ctx.env.MUMPS["params"] = "cc='" + cc + "' fc='" + fc + "'";
    ctx.env.MUMPS["params"] += " opt='-nofor_main'"


def check_libraries(libs, path, extension=".a"):
    for lib in libs:
        if not os.path.isfile(path + "lib" + lib + extension):
            return False

    return True

def build(ctx):
    ctx.env = ctx.all_envs[TOOLS]

    if ctx.env.EXTERNAL_LIBRARIES:
        return

    if ctx.env.LIBTYPE == "STATIC":
        extension = ".a"
    else:
        extension = ".so"

    if not check_libraries(ctx.env.METIS["libs"], "{0}/libs{1}/".format(ctx.ROOT, ctx.env.INT_WIDTH), extension):
        ctx(
            rule    = "cd {0}; make config idx_width={1} {2}; make install".format(ctx.env.METIS["path"], ctx.env.INT_WIDTH, ctx.env.METIS["params"]),
            always  = True,
            name    = "build METIS library with {0}b integers".format(ctx.env.INT_WIDTH)
        )

    if (ctx.env.SOLVER == "MUMPS" or ctx.env.SOLVER == "DISSECTION") and not check_libraries(ctx.env.SCOTCH["libs"], ctx.ROOT + "/libs/", extension):
        ctx(
            rule    = "cd " + ctx.env.SCOTCH["path"] + ";" \
                      "make scotch esmumps " + ctx.env.SCOTCH["params"] + ";" \
                      "make install " + ctx.env.PREFIX,
            always  = True,
            name    = "build scotch library"
        )

    if ctx.env.SOLVER == "MUMPS" and not check_libraries(ctx.env.MUMPS["libs"], ctx.ROOT + "/libs/"):
        ctx(
            rule    = "cd " + ctx.env.MUMPS["path"] + ";" \
                      "make d " + ctx.env.MUMPS["params"] + ";" \
                      "make install " + ctx.env.PREFIX,
            always  = True,
            name    = "build MUMPS library"
        )

    # Create symlinks to correct version of library
    if os.readlink("{0}/libs/libmetis{1}".format(ctx.ROOT, extension)) != "{0}/libs{1}/libmetis{2}".format(ctx.ROOT, ctx.env.INT_WIDTH, extension):
        ctx(
            rule   = "ln -fs {0}/libs{1}/libmetis{2} {0}/libs/libmetis{2}".format(ctx.ROOT, ctx.env.INT_WIDTH, extension),
            always = True,
            name   = "create symlink to metis"
        )

