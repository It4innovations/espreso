
import os

# External libraries are builded to ROOT/libs32 and ROOT/libs64 directories.
# Then, symlink to these libraries are created into ROOT/libs.

def check_libraries(ctx, libs):
    for lib in libs:
        if not os.path.isfile("{0}/libs{1}/lib{2}{3}".format(ctx.ROOT, ctx.env.INT_WIDTH, lib, ctx.env.LIBEXT)):
            return False

    return True

def check_symlink(ctx, lib):
    if not os.path.isfile("{0}/libs/lib{2}{3}".format(ctx.ROOT, ctx.env.INT_WIDTH, lib, ctx.env.LIBEXT)):
        return False

    return True

def create_symlink(ctx, lib):
    if check_symlink(ctx, lib):
        return

    desc = "{0}/libs/lib{1}{2}".format(ctx.ROOT, lib, ctx.env.LIBEXT)
    source = "{0}/libs{1}/lib{2}{3}".format(ctx.ROOT, ctx.env.INT_WIDTH, lib, ctx.env.LIBEXT)
    if not os.path.isfile(desc) or os.readlink(desc) != source:
        ctx(
            rule   = "ln -fs {0} {1}".format(source, desc),
            always = True,
            name   = "create symlink to {0}".format(lib)
        )


def build_metis(ctx):
    create_symlink(ctx, "metis")

    if check_libraries(ctx, [ "metis" ]):
        return

    path = ctx.ROOT + "/tools/metis-5.1.0/"
    params = "prefix={0}".format(ctx.ROOT)
    if ctx.env.LIBTYPE == "SHARED":
        params += " shared=1"

    ctx(
        rule    = "cd {0}; make config idx_width={1} {2}; make install".format(path, ctx.env.INT_WIDTH, params),
        always  = True,
        name    = "build METIS library with {0}b integers".format(ctx.env.INT_WIDTH)
    )

def build_scotch(ctx):
    libs = [ "scotch", "scotcherr", "scotcherrexit", "esmumps" ]

    for lib in libs:
        create_symlink(ctx, lib)

    if check_libraries(ctx, libs):
        return

    path = ctx.ROOT + "/tools/scotch_6.0.4/src"

    ctx(
        rule    = "cd {1}; ln -sf Makefile.{0} Makefile.inc; make scotch esmumps int_width={3}; make install prefix={2} int_width={3}".format(ctx.env.LIBTYPE, path, ctx.ROOT, ctx.env.INT_WIDTH),
        always  = True,
        name    = "build scotch library with {0}b integers".format(ctx.env.INT_WIDTH)
    )

def build_mumps(ctx):
    if ctx.env.INT_WIDTH == 64:
        ctx.fatal("Cannot build MUMPS with 64b integers")

    libs = [ "dmumps", "mumps_common", "pord" ]

    for lib in libs:
        create_symlink(ctx, lib)

    if check_libraries(ctx, ctx.env.MUMPS["libs"]):
        return

    path = ctx.ROOT + "/tools/MUMPS_5.0.1"
    params = "cc={0} fc={1} opt='-nofor_main'".format(ctx.env.CC[0], ctx.env.FC[0])

    ctx(
        rule    = "cd {0}; make d {1}; make install prefix={2}".format(path, params, ctx.ROOT),
        always  = True,
        name    = "build MUMPS library"
    )

def build_qd(ctx):
    create_symlink(ctx, "qd")

    if check_libraries(ctx, [ "qd" ]):
        return

    path = ctx.ROOT + "/tools/qd-2.3.17"
    params = "CXX={0} CC={1} FC={2} --prefix={3}/install -q".format(ctx.env.CXX[0], ctx.env.CC[0], ctx.env.FC[0], path)
    if ctx.env.LIBTYPE == "SHARED":
        params += " --enable-shared=yes"

    ctx(
        rule    = "cd {0}; ./configure {1}; make".format(path, params),
        always  = True,
        name    = "build qd library"
    )
    ctx.add_group()
    ctx(
        rule    = "cp {0}/src/.libs/libqd{1} {2}/libs32/".format(path, ctx.env.LIBEXT, ctx.ROOT),
        always  = True,
        name    = "install libqd{0} library".format(ctx.env.LIBEXT)
    )

def build_dissection(ctx):
    if ctx.env.INT_WIDTH == 64:
        ctx.fatal("Cannot build DISSECTION with 64b integers")

    create_symlink(ctx, "Dissection")

    if check_libraries(ctx, [ "Dissection" ]):
        return

    path = ctx.ROOT + "/tools/dissection/src"
    params = "ROOT={0} LIBTYPE={1}".format(ctx.ROOT, ctx.env.LIBTYPE)

    ctx(
        rule    = "cd {0}; make distclean; make {1}".format(path, params),
        always  = True,
        name    = "build Dissection library"
    )


def configure(ctx):
    if ctx.env.LIBTYPE == "STATIC":
        ctx.env.LIBEXT = ".a"
    else:
        ctx.env.LIBEXT = ".so"

def build(ctx):
    if ctx.env.EXTERNAL_LIBRARIES:
        return

    build_metis(ctx)

    if ctx.env.SOLVER == "MUMPS":
        build_scotch(ctx)
        build_mumps(ctx)

    if ctx.env.SOLVER == "DISSECTION":
        build_scotch(ctx)
        build_qd(ctx)
        ctx.add_group()
        build_dissection(ctx)


